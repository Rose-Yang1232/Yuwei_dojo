#!/opt/pwn.college/python

import random
import flask
import os

app = flask.Flask(__name__)


import sqlite3
import tempfile


class TemporaryDB:
    def __init__(self):
        self.db_file = tempfile.NamedTemporaryFile("x", suffix=".db")

    def execute(self, sql, parameters=()):
        connection = sqlite3.connect(self.db_file.name)
        connection.row_factory = sqlite3.Row
        cursor = connection.cursor()
        result = cursor.execute(sql, parameters)
        connection.commit()
        return result


db = TemporaryDB()

# https://www.sqlite.org/lang_createtable.html
db.execute("""CREATE TABLE users AS SELECT "admin" AS username, ? as pin""", [random.randrange(2**32, 2**63)])
# https://www.sqlite.org/lang_insert.html
db.execute("""INSERT INTO users SELECT "guest" as username, 1337 as pin""")


@app.route("/login-page", methods=["POST"])
def challenge_post():
    username = flask.request.form.get("user-alias")
    pin = flask.request.form.get("pin")
    if not username:
        flask.abort(400, "Missing `user-alias` form parameter")
    if not pin:
        flask.abort(400, "Missing `pin` form parameter")

    if pin[0] not in "0123456789":
        flask.abort(400, "Invalid pin")

    try:
        # https://www.sqlite.org/lang_select.html
        query = f"SELECT rowid, * FROM users WHERE username = '{username}' AND pin = { pin }"
        print(f"DEBUG: {query=}")
        user = db.execute(query).fetchone()
    except sqlite3.Error as e:
        flask.abort(500, f"Query: {query}\nError: {e}")

    if not user:
        flask.abort(403, "Invalid username or pin")

    flask.session["user"] = username
    return flask.redirect(flask.request.path)


@app.route("/login-page", methods=["GET"])
def challenge_get():
    if not (username := flask.session.get("user", None)):
        greeting = "Welcome to the login service! Please log in as admin to get the flag."
    else:
        greeting = f"Hello, {username}!"
        if username == "admin":
            greeting += "<br>Here is your flag: " + open("/flag").read()

    # Note: we include a <head> with CSS to center the body content
    return f"""
    <html>
      <head>
        <style>
          html, body {{
            margin: 0;
            height: 100%;
          }}
          body {{
            display: flex;
            justify-content: center;
            align-items: center;
            flex-direction: column;
            font-family: sans-serif;
          }}
          form {{
            margin-top: 1em;
          }}
        </style>
      </head>
      <body>
        <div>
          {greeting}
          <hr>
          <form method="post">
            <label>User:
              <input type="text" name="user-alias">
            </label>
            <label>Pin:
              <input type="text" name="pin">
            </label>
            <input type="submit" value="Submit">
          </form>
        </div>
      </body>
    </html>
    """



app.secret_key = os.urandom(8)
app.config["SERVER_NAME"] = f"challenge.localhost:80"
app.run("challenge.localhost", 80)
